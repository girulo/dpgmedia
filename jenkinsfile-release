def JKUBE_SERVICES = ["dpgmedia"]
def SERVICES_VERSIONS = []
pipeline {
  agent any
  stages {

    stage('Checkout Source') {
      steps {
        git(
          url: "${params.PROJECT_REPO}",
          branch: "${params.REPO_BRANCH}",
          credentialsId: "user-credentials"
        )
      }
    }

    stage('Maven Release') {
      steps {
        sh """
            mvn -B \
                -DSkipTests \
                -Dmaven.test.skip=true \
                -Dmaven.javadoc.skip=true \
                -DuseReleaseProfile=false \
                release:clean release:prepare release:perform
            """
        }
     }

     stage('Git head -> release:prepare commit'){
       steps {
         sh "git checkout HEAD~"
       }
     }

    stage('Get release version'){
      steps {
        script {
          RELEASE_VERSION = sh(script: 'echo $(git log -1) | grep -E -o \'[0-9]+\\.[0-9]+\\.[0-9]+\'', returnStdout: true).trim()
          println "using release version ${RELEASE_VERSION}"
          if(!RELEASE_VERSION){
            error("unable to get release version")
          }
        }
      }
    }

    stage('JKube Services') {
      steps {
        script {
          for (fsvc in JKUBE_SERVICES) {
            dir("${fsvc}"){
              println "fabricating with Jkube ${fsvc}"
              sh "mvn -B -DskipTests=true -Ddocker.tag=${RELEASE_VERSION} install k8s:push helm:upload -Pkubernetes"
              SERVICES_VERSIONS.push("${fsvc},${RELEASE_VERSION}")
              println "services to deploy ${SERVICES_VERSIONS}"
            }
          }
        }
      }
    }

    stage('Merge master back to develop'){
      steps {
        sh "git checkout develop && git merge master && git push"
      }
    }

  }
  post {
    success {
        slackSend (color: '#00FF00', message: "SUCCESSFUL: Release '${env.JOB_NAME} ${RELEASE_VERSION}' \n ${SERVICES_VERSIONS} \n (${env.BUILD_URL})")
    }
    failure {
        slackSend (color: '#FF0000', message: "FAILED: Release '${env.JOB_NAME} ${RELEASE_VERSION}' (${env.BUILD_URL})")
    }
  }
}
